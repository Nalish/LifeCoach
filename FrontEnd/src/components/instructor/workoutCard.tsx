import React, { useEffect, useState, useCallback } from "react"; 
import EditWorkoutModal from "./editWorkoutModal";
import AssignWorkoutModal from "./assignWorkoutModal";
import type { Workout } from "../../types/workout";
import "../../styles/instructor.css";

interface Client {
Â  user_id: number;
Â  name: string;
Â  email: string;
}

const InstructorWorkouts: React.FC = () => {
Â  // ðŸ›‘ FIX 1: State for dynamic instructor ID
Â  const [instructorId, setInstructorId] = useState<number | null>(null);
Â  const [workouts, setWorkouts] = useState<Workout[]>([]);
Â  const [selectedWorkout, setSelectedWorkout] = useState<Workout | null>(null);

Â  // Edit modal
Â  const [isEditOpen, setIsEditOpen] = useState(false);

Â  // Assign modal
Â  const [isAssignOpen, setIsAssignOpen] = useState(false);
Â  const [clients, setClients] = useState<Client[]>([]);
Â  
Â  // Get ID from localStorage on mount
Â  useEffect(() => {
Â  Â  // âœ… FIX 2: Read the dedicated instructorId key
Â  Â  const storedId = localStorage.getItem("instructorId");
Â  Â  if (storedId) {
Â  Â  Â  setInstructorId(parseInt(storedId, 10));
Â  Â  }
Â  }, []);

Â  // --- Data Fetching: Workouts (DISPLAY) ---
Â  useEffect(() => {
    if (instructorId === null) return;

Â  Â  const fetchWorkouts = async () => {
Â  Â  Â  try {
        // âœ… FIX 3: Use dynamic instructorId in the query URL for DISPLAY
Â  Â  Â  Â  const response = await fetch(`http://localhost:3000/workout/instructor/instructor_id=${instructorId}`);
Â  Â  Â  Â  const data = await response.json();
Â  Â  Â  Â  setWorkouts(data);
Â  Â  Â  } catch (error) {
Â  Â  Â  Â  console.error("Error fetching workouts:", error);
Â  Â  Â  }
Â  Â  };

Â  Â  fetchWorkouts();
Â  }, [instructorId]); // Depend on dynamic ID

Â  // --- Data Fetching: Clients ---
Â  useEffect(() => {
    // Fetch clients regardless of instructorId, but only once
Â  Â  const fetchClients = async () => {
Â  Â  Â  try {
Â  Â  Â  Â  const res = await fetch("http://localhost:3000/client");
Â  Â  Â  Â  const data = await res.json();
Â  Â  Â  Â  setClients(data.clients || data);
Â  Â  Â  } catch (err) {
Â  Â  Â  Â  console.error("Error fetching clients:", err);
Â  Â  Â  }
Â  Â  };
Â  Â  fetchClients();
Â  }, []);

Â  // --- Handlers ---

Â  const handleAssign = (workout: Workout) => {
Â  Â  setSelectedWorkout(workout);
Â  Â  setIsAssignOpen(true);
Â  };

Â  const handleEdit = (workout: Workout) => {
Â  Â  setSelectedWorkout(workout);
Â  Â  setIsEditOpen(true);
Â  };

Â  const handleDelete = async (workoutId: number) => {
Â  Â  if (!window.confirm("Delete this workout?")) return;
Â  Â  try {
Â  Â  Â  const res = await fetch(`http://localhost:3000/workout/${workoutId}`, {
Â  Â  Â  Â  method: "DELETE",
Â  Â  Â  });
Â  Â  Â  if (res.ok) {
Â  Â  Â  Â  setWorkouts((prev) => prev.filter((w) => w.workout_id !== workoutId));
Â  Â  Â  }
Â  Â  } catch (err) {
Â  Â  Â  console.error("Error deleting workout:", err);
Â  Â  }
Â  };

Â  const updateWorkout = (updatedWorkout: Workout) => {
Â  Â  setWorkouts((prev) =>
Â  Â  Â  prev.map((w) =>
Â  Â  Â  Â  w.workout_id === updatedWorkout.workout_id ? updatedWorkout : w
Â  Â  Â  )
Â  Â  );
Â  };

Â  /**
Â  Â * BATCH ASSIGNMENT HANDLER (Wrapped in useCallback for stability)
Â  Â */
Â  const handleBatchAssign = useCallback(async (
Â  Â  Â  workoutId: number, 
Â  Â  Â  clientIds: number[], 
Â  Â  Â  status: string, 
Â  Â  Â  notes: string
Â  ) => {
      if (instructorId === null) {
          alert("Error: Instructor ID is missing for assignment.");
          return;
      }

Â  Â  Â  const assignmentPromises = clientIds.map(clientId => {
Â  Â  Â  Â  Â  const payload = {
Â  Â  Â  Â  Â  Â  Â  client_id: clientId,
Â  Â  Â  Â  Â  Â  Â  workout_id: workoutId,
Â  Â  Â  Â  Â  Â  Â  instructor_id: instructorId, // âœ… FIX 4: Use dynamic instructorId
Â  Â  Â  Â  Â  Â  Â  status: status,
Â  Â  Â  Â  Â  Â  Â  notes: notes,
Â  Â  Â  Â  Â  };
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  return fetch("http://localhost:3000/clientWorkouts", {
Â  Â  Â  Â  Â  Â  Â  method: "POST",
Â  Â  Â  Â  Â  Â  Â  headers: { "Content-Type": "application/json" },
Â  Â  Â  Â  Â  Â  Â  body: JSON.stringify(payload),
Â  Â  Â  Â  Â  })
Â  Â  Â  Â  Â  .then(res => {
Â  Â  Â  Â  Â  Â  Â  if (!res.ok) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  return res.json().then(data => Promise.reject(new Error(`Client ${clientId}: ${data.message || 'Failed'}`)));
Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  return res.json();
Â  Â  Â  Â  Â  })
Â  Â  Â  Â  Â  .catch(err => {
Â  Â  Â  Â  Â  Â  Â  console.error(`Assignment error for client ${clientId}:`, err.message);
Â  Â  Â  Â  Â  Â  Â  return { success: false, client: clientId, error: err.message };
Â  Â  Â  Â  Â  });
Â  Â  Â  });

Â  Â  Â  const results = await Promise.all(assignmentPromises);

Â  Â  Â  const failedAssignments = results.filter(r => r && r.success === false);

Â  Â  Â  if (failedAssignments.length === 0) {
Â  Â  Â  Â  Â  alert(`Successfully assigned workout to ${clientIds.length} client(s)!`);
Â  Â  Â  } else if (failedAssignments.length < clientIds.length) {
Â  Â  Â  Â  Â  alert(`Assigned workout to some clients, but failed for ${failedAssignments.length} client(s). Check console for details.`);
Â  Â  Â  } else {
Â  Â  Â  Â  Â  alert("Failed to assign workout to any selected clients. Check console for details.");
Â  Â  Â  }
Â  }, [instructorId]); // Dependency now uses the dynamic ID

  if (instructorId === null) {
    return <div className="card text-center p-4">Loading instructor permissions...</div>;
  }

Â  return (
Â  Â  <div className="card">
Â  Â  Â  <div className="card-header flex justify-between items-center">
Â  Â  Â  Â  <h3>
Â  Â  Â  Â  Â  <i className="fas fa-dumbbell"></i> Workouts
Â  Â  Â  Â  </h3>
Â  Â  Â  Â  <a href="/workouts" className="view-all-link">
Â  Â  Â  Â  Â  View All
Â  Â  Â  Â  </a>
Â  Â  Â  Â 
Â  Â  Â  </div>

Â  Â  Â  <div className="card-content">
Â  Â  Â  Â  <table className="workouts-table">
Â  Â  Â  Â  Â  <thead>
Â  Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  Â  <th>Title</th>
Â  Â  Â  Â  Â  Â  Â  <th>Description</th>
Â  Â  Â  Â  Â  Â  Â  <th>Plan</th>
Â  Â  Â  Â  Â  Â  Â  <th>Actions</th>
Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  </thead>
Â  Â  Â  Â  Â  <tbody>
Â  Â  Â  Â  Â  Â  {workouts.slice(0, 5).map((workout) => (
Â  Â  Â  Â  Â  Â  Â  <tr key={workout.workout_id}>
Â  Â  Â  Â  Â  Â  Â  Â  <td>{workout.title}</td>
Â  Â  Â  Â  Â  Â  Â  Â  <td>{workout.description}</td>
Â  Â  Â  Â  Â  Â  Â  Â  <td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <ul className="plan-list">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {workout.plan.map((item, index) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <li key={index}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {item.exercise}{" "}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {item.sets && `| Sets: ${item.sets}`}{" "}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {item.reps ? `| Reps: ${item.reps}` : ''}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {item.duration ? `| Duration: ${item.duration}s` : ''} 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </li>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  </ul>
Â  Â  Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  Â  Â  Â  <td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => handleAssign(workout)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="btn-assign"
Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Assign
Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => handleEdit(workout)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="btn-edit"
Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Edit
Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => handleDelete(workout.workout_id)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="btn-delete"
Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Delete
Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  {workouts.length === 0 && (
Â  Â  Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  Â  Â  <td colSpan={4} className="text-center">
Â  Â  Â  Â  Â  Â  Â  Â  Â  No workouts available.
Â  Â  Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  </tbody>
Â  Â  Â  Â  </table>
Â  Â  Â  </div>

Â  Â  Â  {/* Edit Modal */}
Â  Â  Â  <EditWorkoutModal
Â  Â  Â  Â  isOpen={isEditOpen}
Â  Â  Â  Â  onClose={() => setIsEditOpen(false)}
Â  Â  Â  Â  workout={selectedWorkout}
Â  Â  Â  Â  onSave={updateWorkout}
Â  Â  Â  />

Â  Â  Â  {/* Assign Modal (UPDATED PROPS) */}
Â  Â  Â  <AssignWorkoutModal
Â  Â  Â  Â  isOpen={isAssignOpen}
Â  Â  Â  Â  onClose={() => setIsAssignOpen(false)}
Â  Â  Â  Â  clients={clients}
Â  Â  Â  Â  selectedWorkout={selectedWorkout}
Â  Â  Â  Â  onAssign={handleBatchAssign} // ðŸ‘ˆ NEW BATCH HANDLER
Â  Â  Â  />
Â  Â  </div>
Â  );
};

export default InstructorWorkouts;
