import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom"; // Added for potential redirect if ID is missing

interface InstructorProfile {
Â  name?: string;
Â  profile_title?: string | null;
Â  years_of_experience?: number | null;
Â  available_locations?: string[] | null;
Â  avatar_url?: string | null; // optional, in case you add avatar later
}

const ProfileCard: React.FC = () => {
Â  const [profile, setProfile] = useState<InstructorProfile | null>(null);
Â  const [loading, setLoading] = useState(true);
Â  const [error, setError] = useState<string | null>(null);
  
  // ðŸ›‘ FIX 1: State for dynamic instructor ID
  const [instructorId, setInstructorId] = useState<number | null>(null); 
  const navigate = useNavigate(); // Initialize useNavigate for potential redirects

  // Retrieve the ID from localStorage on component mount
  useEffect(() => {
    // âœ… FIX 2: Read the dedicated instructorId from localStorage
    const storedId = localStorage.getItem("instructorId"); 
    if (storedId) {
      setInstructorId(parseInt(storedId, 10));
    } else {
      // Optional: Redirect to login if a profile card is opened without a valid instructorId
      // console.error("Missing instructorId in localStorage. Redirecting...");
      // navigate("/login");
    }
  }, [navigate]);

Â  useEffect(() => {
    // Only proceed if we have a valid ID
    if (instructorId === null) return;
    
Â  Â  const fetchProfile = async () => {
Â  Â  Â  try {
Â  Â  Â  Â  // âœ… FIX 3: Use dynamic instructorId in the fetch URL
Â  Â  Â  Â  const res1 = await fetch(`http://localhost:3000/instructors/${instructorId}/profile`);
Â  Â  Â  Â  if (res1.ok) {
Â  Â  Â  Â  Â  const json = await res1.json();
Â  Â  Â  Â  Â  setProfile((json && (json.profile ?? json)) || null);
          setLoading(false); // Set loading to false after successful fetch
Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }

Â  Â  Â  Â  // fallback (This logic seems redundant as it hits the same endpoint, 
        // but kept for structure while using the dynamic ID)
Â  Â  Â  Â  const res2 = await fetch(`http://localhost:3000/instructors/${instructorId}/profile`);
Â  Â  Â  Â  if (!res2.ok) throw new Error("Failed to fetch instructor profile");
Â  Â  Â  Â  const json2 = await res2.json();
Â  Â  Â  Â  setProfile((json2 && (json2.profile ?? json2)) || null);
Â  Â  Â  } catch (err: any) {
Â  Â  Â  Â  console.error("Error fetching profile:", err);
Â  Â  Â  Â  setError("Unable to load profile");
Â  Â  Â  } finally {
Â  Â  Â  Â  setLoading(false);
Â  Â  Â  }
Â  Â  };

Â  Â  fetchProfile();
Â  }, [instructorId]); // Depend on instructorId to re-run when it is fetched

Â  const getInitials = (name?: string) => {
Â  Â  if (!name) return "";
Â  Â  return name
Â  Â  Â  .split(/\s+/)
Â  Â  Â  .filter(Boolean)
Â  Â  Â  .map((n) => n[0])
Â  Â  Â  .join("")
Â  Â  Â  .slice(0, 2)
Â  Â  Â  .toUpperCase();
Â  };

Â  if (loading) return <div className="card profile-card">Loading profile...</div>;
Â  if (error) return <div className="card profile-card">Error: {error}</div>;
Â  if (!profile) return <div className="card profile-card">No profile data found.</div>;

Â  const initials = getInitials(profile.name);

Â  const locations =
Â  Â  Array.isArray(profile.available_locations) && profile.available_locations.length > 0
Â  Â  Â  ? profile.available_locations.join(", ")
Â  Â  Â  : "Location not set";

Â  return (
Â  Â  <div className="card profile-card">
Â  Â  Â  <div className="profile-header">
Â  Â  Â  Â  <div className="profile-avatar-container">
Â  Â  Â  Â  Â  <div className="profile-avatar">
Â  Â  Â  Â  Â  Â  {/* If you later add avatar_url in DB, it will show; otherwise show initials fallback */}
Â  Â  Â  Â  Â  Â  {profile.avatar_url ? (
Â  Â  Â  Â  Â  Â  Â  <img src={profile.avatar_url} alt={profile.name ?? "Instructor avatar"} />
Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  <div className="avatar-fallback" aria-hidden>
Â  Â  Â  Â  Â  Â  Â  Â  {initials || "?"}
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  Â  {/* edit button (can be hidden if not editable) */}
Â  Â  Â  Â  Â  Â  <button className="avatar-edit-btn" aria-label="Edit avatar">
Â  Â  Â  Â  Â  Â  Â  <i className="fas fa-camera"></i>
Â  Â  Â  Â  Â  Â  </button>

Â  Â  Â  Â  Â  Â  {/* verified badge - show always or conditionally when you add verification */}
Â  Â  Â  Â  Â  Â  <div className="verified-badge">
Â  Â  Â  Â  Â  Â  Â  <i className="fas fa-check-circle"></i>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  <h2 className="profile-name">{profile.name ?? "Unnamed Instructor"}</h2>
Â  Â  Â  Â  <p className="profile-title">{profile.profile_title ?? "Instructor"}</p>

Â  Â  Â  Â  <div className="profile-meta">
Â  Â  Â  Â  Â  <div className="meta-item">
Â  Â  Â  Â  Â  Â  <i className="fas fa-map-marker-alt"></i> <span>{locations}</span>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  <div className="meta-item">
Â  Â  Â  Â  Â  Â  <i className="fas fa-calendar"></i>{" "}
Â  Â  Â  Â  Â  Â  <span>
Â  Â  Â  Â  Â  Â  Â  {profile.years_of_experience != null
Â  Â  Â  Â  Â  Â  Â  Â  ? `${profile.years_of_experience} years exp.`
Â  Â  Â  Â  Â  Â  Â  Â  : "Years of experience not set"}
Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  </div>
Â  );
};

export default ProfileCard;
